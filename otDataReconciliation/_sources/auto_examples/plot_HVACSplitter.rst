
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_HVACSplitter.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_plot_HVACSplitter.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_HVACSplitter.py:


Reconcile data for the HVAC Splitter
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 5-71



.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_HVACSplitter_001.png
         :alt: Iso-PDF values
         :srcset: /auto_examples/images/sphx_glr_plot_HVACSplitter_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_HVACSplitter_002.png
         :alt: Iso-PDF values
         :srcset: /auto_examples/images/sphx_glr_plot_HVACSplitter_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/images/sphx_glr_plot_HVACSplitter_003.png
         :alt: plot HVACSplitter
         :srcset: /auto_examples/images/sphx_glr_plot_HVACSplitter_003.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      Variable to be Estimated   ...  Local Quality  
    0                        Q1  ...          3.66521
    1                        Q2  ...          2.12716
    2                        Q3  ...          1.75720
    3                        T1  ...          3.26845
    4                        T2  ...          5.57239
    5                        T3  ...          4.89078

    [6 rows x 7 columns]
                 Q1          Q2          Q3        T1        T2        T3
    Sxij                                                                 
    Q1    71.894900   -7.653470   64.241500  0.412516  0.351214 -0.763730
    Q2    -7.653470  142.572000  134.918000 -0.893073 -0.760360  1.653430
    Q3    64.241500  134.918000  199.160000 -0.480558 -0.409145  0.889703
    T1     0.412516   -0.893073   -0.480558  0.079987 -0.008525  0.018539
    T2     0.351214   -0.760360   -0.409145 -0.008525  0.082741  0.015784
    T3    -0.763730    1.653430    0.889703  0.018539  0.015784  0.055677






|

.. code-block:: Python



    # # Reconciliation de donnée avec OpenModelica et OpenTURNS
    # L'objet est de tester la classe DataReconciliationOM fournissant un wrapper python de la reconciliation de donnée réalisée dans OpenModelica.
    # Les résultats de la réconciliation de données sont accessibles au format OpenTURNS (distribution, matrices) pour être visualisées et utilisées dans des études d'incertitudes (propagation, calage par exemple).

    # Import des modules nécessaires

    import openturns as ot
    import openturns.viewer as otv
    from IPython import get_ipython
    from IPython.display import display

    import otDataReconciliation as otDataR

    # Affichage graphiques en ligne si utilisation Ipython
    try:
        get_ipython().run_line_magic("matplotlib", "inline")
    except:
        pass

    # Le modèle jouet est ici l'exemple d'un gaine de ventilation se séparant
    # $$ Q_3 = Q_1 + Q_2 $$
    # $$ Q_3 c_p T_3 = Q_1 c_p T_1 + Q_2 c_p T_2 $$
    # Les débits sont ici en $m^3.h^{-1}$ et les températures en $degC$
    modelName = "TestDataR_HVACSplitter"

    # Construction de la classe réconciliation de donnée
    VarNames = ot.Description(["Q1", "Q2", "Q3", "T1", "T2", "T3"])
    priorMeasurements = ot.Point([130, 210, 360, 20, 30, 22])
    covM = ot.CovarianceMatrix([
        [100, 100, 0, 0, 0, 0],
        [100, 400, 0, 0, 0, 0],
        [0, 0, 400, 0, 0, 0],
        [0, 0, 0, 0.3**2, 0, 0],
        [0, 0, 0, 0, 0.3**2, 0],
        [0, 0, 0, 0, 0, 0.3**2],
    ])
    casePath = "./"
    simuMatPath = "SIMU_MAT_0"
    dataR = otDataR.DataReconciliationOM(modelName, VarNames, priorMeasurements, covM, casePath, simuMatPath)

    # Visualisation de la distribution multivariée des mesures avant réconciliation
    priorDistribution = dataR.getPriorDistribution()
    grid = priorDistribution.drawDistributionGridPDF()
    fig = otv.View(grid)

    # Lancer la réconciliation de données
    dataR.reconcileData()

    # # Analyse des résultats
    df = dataR.getLocalResultsAsDataFrame()
    display(df)

    # Visualisation de la distribution multivariée des mesures réconciliées, marginales 1D et 2D (visualisation de la dépendance à posteriori)
    posteriorDistribution = dataR.getPosteriorDistribution()
    grid = posteriorDistribution.drawDistributionGridPDF()
    fig = otv.View(grid)

    # Il est également possible de récupérer la matrice de covariance à posteriori
    posteriorCovM = dataR.getCovarianceMatrixAsDataFrame()
    display(posteriorCovM)

    # Simulation de l'effet de la réconciliation de donnée sur les marginales
    grid = dataR.drawPriorPosteriorMarginalsDistribution()
    fig = otv.View(grid)


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 4.978 seconds)


.. _sphx_glr_download_auto_examples_plot_HVACSplitter.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_HVACSplitter.ipynb <plot_HVACSplitter.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_HVACSplitter.py <plot_HVACSplitter.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_HVACSplitter.zip <plot_HVACSplitter.zip>`
