Search.setIndex({"alltitles": {"1- Problem statement": [[6, "problem-statement"]], "2- Deterministic parametric analysis": [[6, "deterministic-parametric-analysis"]], "ABCCalibration": [[9, "abccalibration"]], "ABCCalibrationResult": [[10, "abccalibrationresult"]], "API Reference": [[15, "api-reference"]], "Architecture considerations": [[4, "architecture-considerations"]], "Calibrate Chaboche model using ABCCalibration Class": [[2, "calibrate-chaboche-model-using-abccalibration-class"]], "Calibrate the model with ABC": [[2, "calibrate-the-model-with-abc"]], "CombinedInterval": [[11, "combinedinterval"]], "Compilation": [[4, "compilation"]], "Computation times": [[3, "computation-times"], [8, "computation-times"]], "ConditionalSample": [[12, "conditionalsample"]], "Define the Observations": [[2, "define-the-observations"]], "Dependencies": [[4, "dependencies"]], "Developer guide": [[5, "developer-guide"], [7, "developer-guide"]], "Example : Using otABCCalibrationpython module": [[1, "example-using-otabccalibrationpython-module"]], "Examples": [[0, "examples"], [7, "examples"]], "Func": [[13, "func"]], "Indices and tables": [[7, "indices-and-tables"]], "MyClass": [[14, "myclass"]], "Set Calibration prior distribution": [[2, "set-calibration-prior-distribution"]], "Set the calibration criteria": [[2, "set-the-calibration-criteria"]], "Source code structure": [[4, "source-code-structure"]], "Test case 1: XXXXXX": [[6, "test-case-1-xxxxxx"]], "User documentation": [[7, "user-documentation"]], "Validation": [[6, "validation"]], "a- Inputs": [[6, "a-inputs"], [6, "id1"]], "b- Output": [[6, "b-output"]], "b- Results": [[6, "b-results"]], "otABCCalibration documentation": [[7, "otabccalibration-documentation"]]}, "docnames": ["auto_examples/index", "auto_examples/plot_basic", "auto_examples/plot_calibration_chaboche_model", "auto_examples/sg_execution_times", "developer_guide/architecture/architecture", "developer_guide/developer_guide", "developer_guide/validation/validation", "index", "sg_execution_times", "user_manual/_generated/otABCCalibration.ABCCalibration", "user_manual/_generated/otABCCalibration.ABCCalibrationResult", "user_manual/_generated/otABCCalibration.CombinedInterval", "user_manual/_generated/otABCCalibration.ConditionalSample", "user_manual/_generated/otABCCalibration.Func", "user_manual/_generated/otABCCalibration.MyClass", "user_manual/user_manual"], "envversion": {"sphinx": 61, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2}, "filenames": ["auto_examples/index.rst", "auto_examples/plot_basic.rst", "auto_examples/plot_calibration_chaboche_model.rst", "auto_examples/sg_execution_times.rst", "developer_guide/architecture/architecture.rst", "developer_guide/developer_guide.rst", "developer_guide/validation/validation.rst", "index.rst", "sg_execution_times.rst", "user_manual/_generated/otABCCalibration.ABCCalibration.rst", "user_manual/_generated/otABCCalibration.ABCCalibrationResult.rst", "user_manual/_generated/otABCCalibration.CombinedInterval.rst", "user_manual/_generated/otABCCalibration.ConditionalSample.rst", "user_manual/_generated/otABCCalibration.Func.rst", "user_manual/_generated/otABCCalibration.MyClass.rst", "user_manual/user_manual.rst"], "indexentries": {"__init__() (abccalibration method)": [[9, "otABCCalibration.ABCCalibration.__init__", false]], "__init__() (abccalibrationresult method)": [[10, "otABCCalibration.ABCCalibrationResult.__init__", false]], "__init__() (combinedinterval method)": [[11, "otABCCalibration.CombinedInterval.__init__", false]], "__init__() (conditionalsample method)": [[12, "otABCCalibration.ConditionalSample.__init__", false]], "__init__() (func method)": [[13, "otABCCalibration.Func.__init__", false]], "abccalibration (class in otabccalibration)": [[9, "otABCCalibration.ABCCalibration", false]], "abccalibrationresult (class in otabccalibration)": [[10, "otABCCalibration.ABCCalibrationResult", false]], "combinedinterval (class in otabccalibration)": [[11, "otABCCalibration.CombinedInterval", false]], "computedistance() (combinedinterval method)": [[11, "otABCCalibration.CombinedInterval.computeDistance", false]], "computeoptimalpoint() (abccalibrationresult method)": [[10, "otABCCalibration.ABCCalibrationResult.computeOptimalPoint", false]], "conditionalsample (class in otabccalibration)": [[12, "otABCCalibration.ConditionalSample", false]], "contains() (combinedinterval method)": [[11, "otABCCalibration.CombinedInterval.contains", false]], "drawobservationsvsinputs() (abccalibrationresult method)": [[10, "otABCCalibration.ABCCalibrationResult.drawObservationsVsInputs", false]], "drawobservationsvspredictions() (abccalibrationresult method)": [[10, "otABCCalibration.ABCCalibrationResult.drawObservationsVsPredictions", false]], "drawpairmarginalsresiduals() (abccalibrationresult method)": [[10, "otABCCalibration.ABCCalibrationResult.drawPairMarginalsResiduals", false]], "drawparameterdistributions() (abccalibrationresult method)": [[10, "otABCCalibration.ABCCalibrationResult.drawParameterDistributions", false]], "drawposteriorinputdistribution() (conditionalsample method)": [[12, "otABCCalibration.ConditionalSample.drawPosteriorInputDistribution", false]], "drawposterioroutputdistribution() (conditionalsample method)": [[12, "otABCCalibration.ConditionalSample.drawPosteriorOutputDistribution", false]], "drawresiduals() (abccalibrationresult method)": [[10, "otABCCalibration.ABCCalibrationResult.drawResiduals", false]], "drawresidualsnormalplot() (abccalibrationresult method)": [[10, "otABCCalibration.ABCCalibrationResult.drawResidualsNormalPlot", false]], "func (class in otabccalibration)": [[13, "otABCCalibration.Func", false]], "generatedoe() (abccalibration method)": [[9, "otABCCalibration.ABCCalibration.generateDOE", false]], "getabcresidualssample() (abccalibrationresult method)": [[10, "otABCCalibration.ABCCalibrationResult.getABCResidualsSample", false]], "getclassname() (abccalibrationresult method)": [[10, "otABCCalibration.ABCCalibrationResult.getClassName", false]], "getclassname() (combinedinterval method)": [[11, "otABCCalibration.CombinedInterval.getClassName", false]], "getconditionalsample() (abccalibrationresult method)": [[10, "otABCCalibration.ABCCalibrationResult.getConditionalSample", false]], "getdimension() (combinedinterval method)": [[11, "otABCCalibration.CombinedInterval.getDimension", false]], "getevaluatedsample() (abccalibration method)": [[9, "otABCCalibration.ABCCalibration.getEvaluatedSample", false]], "getfinitelowerbound() (combinedinterval method)": [[11, "otABCCalibration.CombinedInterval.getFiniteLowerBound", false]], "getfiniteupperbound() (combinedinterval method)": [[11, "otABCCalibration.CombinedInterval.getFiniteUpperBound", false]], "getid() (abccalibrationresult method)": [[10, "otABCCalibration.ABCCalibrationResult.getId", false]], "getid() (combinedinterval method)": [[11, "otABCCalibration.CombinedInterval.getId", false]], "getinputdescription() (func method)": [[13, "otABCCalibration.Func.getInputDescription", false]], "getinputdimension() (func method)": [[13, "otABCCalibration.Func.getInputDimension", false]], "getinputobservations() (abccalibrationresult method)": [[10, "otABCCalibration.ABCCalibrationResult.getInputObservations", false]], "getlowerbound() (combinedinterval method)": [[11, "otABCCalibration.CombinedInterval.getLowerBound", false]], "getmarginal() (combinedinterval method)": [[11, "otABCCalibration.CombinedInterval.getMarginal", false]], "getname() (abccalibrationresult method)": [[10, "otABCCalibration.ABCCalibrationResult.getName", false]], "getname() (combinedinterval method)": [[11, "otABCCalibration.CombinedInterval.getName", false]], "getobservationserror() (abccalibrationresult method)": [[10, "otABCCalibration.ABCCalibrationResult.getObservationsError", false]], "getoutputatposteriormean() (abccalibrationresult method)": [[10, "otABCCalibration.ABCCalibrationResult.getOutputAtPosteriorMean", false]], "getoutputatpriormean() (abccalibrationresult method)": [[10, "otABCCalibration.ABCCalibrationResult.getOutputAtPriorMean", false]], "getoutputdescription() (func method)": [[13, "otABCCalibration.Func.getOutputDescription", false]], "getoutputdimension() (func method)": [[13, "otABCCalibration.Func.getOutputDimension", false]], "getoutputobservations() (abccalibrationresult method)": [[10, "otABCCalibration.ABCCalibrationResult.getOutputObservations", false]], "getparametermap() (abccalibrationresult method)": [[10, "otABCCalibration.ABCCalibrationResult.getParameterMAP", false]], "getparameterposterior() (abccalibrationresult method)": [[10, "otABCCalibration.ABCCalibrationResult.getParameterPosterior", false]], "getparameterprior() (abccalibrationresult method)": [[10, "otABCCalibration.ABCCalibrationResult.getParameterPrior", false]], "getposteriorglobalsample() (conditionalsample method)": [[12, "otABCCalibration.ConditionalSample.getPosteriorGlobalSample", false]], "getposteriorinputdistribution() (conditionalsample method)": [[12, "otABCCalibration.ConditionalSample.getPosteriorInputDistribution", false]], "getposteriorinputsample() (conditionalsample method)": [[12, "otABCCalibration.ConditionalSample.getPosteriorInputSample", false]], "getposterioroutputsample() (conditionalsample method)": [[12, "otABCCalibration.ConditionalSample.getPosteriorOutputSample", false]], "getpriordoe() (abccalibration method)": [[9, "otABCCalibration.ABCCalibration.getPriorDOE", false]], "getresidualfunction() (abccalibrationresult method)": [[10, "otABCCalibration.ABCCalibrationResult.getResidualFunction", false]], "getresult() (abccalibration method)": [[9, "otABCCalibration.ABCCalibration.getResult", false]], "getshadowedid() (abccalibrationresult method)": [[10, "otABCCalibration.ABCCalibrationResult.getShadowedId", false]], "getshadowedid() (combinedinterval method)": [[11, "otABCCalibration.CombinedInterval.getShadowedId", false]], "getthetamapasdataframe() (abccalibrationresult method)": [[10, "otABCCalibration.ABCCalibrationResult.getThetaMAPAsDataFrame", false]], "getupperbound() (combinedinterval method)": [[11, "otABCCalibration.CombinedInterval.getUpperBound", false]], "getvisibility() (abccalibrationresult method)": [[10, "otABCCalibration.ABCCalibrationResult.getVisibility", false]], "getvisibility() (combinedinterval method)": [[11, "otABCCalibration.CombinedInterval.getVisibility", false]], "getvolume() (combinedinterval method)": [[11, "otABCCalibration.CombinedInterval.getVolume", false]], "hasname() (abccalibrationresult method)": [[10, "otABCCalibration.ABCCalibrationResult.hasName", false]], "hasname() (combinedinterval method)": [[11, "otABCCalibration.CombinedInterval.hasName", false]], "hasvisiblename() (abccalibrationresult method)": [[10, "otABCCalibration.ABCCalibrationResult.hasVisibleName", false]], "hasvisiblename() (combinedinterval method)": [[11, "otABCCalibration.CombinedInterval.hasVisibleName", false]], "intersect() (combinedinterval method)": [[11, "otABCCalibration.CombinedInterval.intersect", false]], "isempty() (combinedinterval method)": [[11, "otABCCalibration.CombinedInterval.isEmpty", false]], "isnumericallyempty() (combinedinterval method)": [[11, "otABCCalibration.CombinedInterval.isNumericallyEmpty", false]], "join() (combinedinterval method)": [[11, "otABCCalibration.CombinedInterval.join", false]], "numericallycontains() (combinedinterval method)": [[11, "otABCCalibration.CombinedInterval.numericallyContains", false]], "run() (abccalibration method)": [[9, "otABCCalibration.ABCCalibration.run", false]], "setabccriteriadescription() (abccalibration method)": [[9, "otABCCalibration.ABCCalibration.setABCCriteriaDescription", false]], "setabcresidualsdescription() (abccalibrationresult method)": [[10, "otABCCalibration.ABCCalibrationResult.setABCResidualsDescription", false]], "setdoe() (abccalibration method)": [[9, "otABCCalibration.ABCCalibration.setDOE", false]], "setfinitelowerbound() (combinedinterval method)": [[11, "otABCCalibration.CombinedInterval.setFiniteLowerBound", false]], "setfiniteupperbound() (combinedinterval method)": [[11, "otABCCalibration.CombinedInterval.setFiniteUpperBound", false]], "setinputdescription() (func method)": [[13, "otABCCalibration.Func.setInputDescription", false]], "setinputobservations() (abccalibrationresult method)": [[10, "otABCCalibration.ABCCalibrationResult.setInputObservations", false]], "setlowerbound() (combinedinterval method)": [[11, "otABCCalibration.CombinedInterval.setLowerBound", false]], "setname() (abccalibrationresult method)": [[10, "otABCCalibration.ABCCalibrationResult.setName", false]], "setname() (combinedinterval method)": [[11, "otABCCalibration.CombinedInterval.setName", false]], "setobservationserror() (abccalibrationresult method)": [[10, "otABCCalibration.ABCCalibrationResult.setObservationsError", false]], "setoutputatpriorandposteriormean() (abccalibrationresult method)": [[10, "otABCCalibration.ABCCalibrationResult.setOutputAtPriorAndPosteriorMean", false]], "setoutputdescription() (func method)": [[13, "otABCCalibration.Func.setOutputDescription", false]], "setoutputobservations() (abccalibrationresult method)": [[10, "otABCCalibration.ABCCalibrationResult.setOutputObservations", false]], "setparametermap() (abccalibrationresult method)": [[10, "otABCCalibration.ABCCalibrationResult.setParameterMAP", false]], "setparameterposterior() (abccalibrationresult method)": [[10, "otABCCalibration.ABCCalibrationResult.setParameterPosterior", false]], "setparameterprior() (abccalibrationresult method)": [[10, "otABCCalibration.ABCCalibrationResult.setParameterPrior", false]], "setresidualfunction() (abccalibrationresult method)": [[10, "otABCCalibration.ABCCalibrationResult.setResidualFunction", false]], "setshadowedid() (abccalibrationresult method)": [[10, "otABCCalibration.ABCCalibrationResult.setShadowedId", false]], "setshadowedid() (combinedinterval method)": [[11, "otABCCalibration.CombinedInterval.setShadowedId", false]], "setupperbound() (combinedinterval method)": [[11, "otABCCalibration.CombinedInterval.setUpperBound", false]], "setvisibility() (abccalibrationresult method)": [[10, "otABCCalibration.ABCCalibrationResult.setVisibility", false]], "setvisibility() (combinedinterval method)": [[11, "otABCCalibration.CombinedInterval.setVisibility", false]]}, "objects": {"otABCCalibration": [[9, 0, 1, "", "ABCCalibration"], [10, 0, 1, "", "ABCCalibrationResult"], [11, 0, 1, "", "CombinedInterval"], [12, 0, 1, "", "ConditionalSample"], [13, 0, 1, "", "Func"], [14, 0, 1, "", "MyClass"]], "otABCCalibration.ABCCalibration": [[9, 1, 1, "", "__init__"], [9, 1, 1, "", "generateDOE"], [9, 1, 1, "", "getEvaluatedSample"], [9, 1, 1, "", "getPriorDOE"], [9, 1, 1, "", "getResult"], [9, 1, 1, "", "run"], [9, 1, 1, "", "setABCCriteriaDescription"], [9, 1, 1, "", "setDOE"]], "otABCCalibration.ABCCalibrationResult": [[10, 1, 1, "", "__init__"], [10, 1, 1, "", "computeOptimalPoint"], [10, 1, 1, "", "drawObservationsVsInputs"], [10, 1, 1, "", "drawObservationsVsPredictions"], [10, 1, 1, "", "drawPairMarginalsResiduals"], [10, 1, 1, "", "drawParameterDistributions"], [10, 1, 1, "", "drawResiduals"], [10, 1, 1, "", "drawResidualsNormalPlot"], [10, 1, 1, "", "getABCResidualsSample"], [10, 1, 1, "", "getClassName"], [10, 1, 1, "", "getConditionalSample"], [10, 1, 1, "", "getId"], [10, 1, 1, "", "getInputObservations"], [10, 1, 1, "", "getName"], [10, 1, 1, "", "getObservationsError"], [10, 1, 1, "", "getOutputAtPosteriorMean"], [10, 1, 1, "", "getOutputAtPriorMean"], [10, 1, 1, "", "getOutputObservations"], [10, 1, 1, "", "getParameterMAP"], [10, 1, 1, "", "getParameterPosterior"], [10, 1, 1, "", "getParameterPrior"], [10, 1, 1, "", "getResidualFunction"], [10, 1, 1, "", "getShadowedId"], [10, 1, 1, "", "getThetaMAPAsDataFrame"], [10, 1, 1, "", "getVisibility"], [10, 1, 1, "", "hasName"], [10, 1, 1, "", "hasVisibleName"], [10, 1, 1, "", "setABCResidualsDescription"], [10, 1, 1, "", "setInputObservations"], [10, 1, 1, "", "setName"], [10, 1, 1, "", "setObservationsError"], [10, 1, 1, "", "setOutputAtPriorAndPosteriorMean"], [10, 1, 1, "", "setOutputObservations"], [10, 1, 1, "", "setParameterMAP"], [10, 1, 1, "", "setParameterPosterior"], [10, 1, 1, "", "setParameterPrior"], [10, 1, 1, "", "setResidualFunction"], [10, 1, 1, "", "setShadowedId"], [10, 1, 1, "", "setVisibility"]], "otABCCalibration.CombinedInterval": [[11, 1, 1, "", "__init__"], [11, 1, 1, "", "computeDistance"], [11, 1, 1, "", "contains"], [11, 1, 1, "", "getClassName"], [11, 1, 1, "", "getDimension"], [11, 1, 1, "", "getFiniteLowerBound"], [11, 1, 1, "", "getFiniteUpperBound"], [11, 1, 1, "", "getId"], [11, 1, 1, "", "getLowerBound"], [11, 1, 1, "", "getMarginal"], [11, 1, 1, "", "getName"], [11, 1, 1, "", "getShadowedId"], [11, 1, 1, "", "getUpperBound"], [11, 1, 1, "", "getVisibility"], [11, 1, 1, "", "getVolume"], [11, 1, 1, "", "hasName"], [11, 1, 1, "", "hasVisibleName"], [11, 1, 1, "", "intersect"], [11, 1, 1, "", "isEmpty"], [11, 1, 1, "", "isNumericallyEmpty"], [11, 1, 1, "", "join"], [11, 1, 1, "", "numericallyContains"], [11, 1, 1, "", "setFiniteLowerBound"], [11, 1, 1, "", "setFiniteUpperBound"], [11, 1, 1, "", "setLowerBound"], [11, 1, 1, "", "setName"], [11, 1, 1, "", "setShadowedId"], [11, 1, 1, "", "setUpperBound"], [11, 1, 1, "", "setVisibility"]], "otABCCalibration.ConditionalSample": [[12, 1, 1, "", "__init__"], [12, 1, 1, "", "drawPosteriorInputDistribution"], [12, 1, 1, "", "drawPosteriorOutputDistribution"], [12, 1, 1, "", "getPosteriorGlobalSample"], [12, 1, 1, "", "getPosteriorInputDistribution"], [12, 1, 1, "", "getPosteriorInputSample"], [12, 1, 1, "", "getPosteriorOutputSample"]], "otABCCalibration.Func": [[13, 1, 1, "", "__init__"], [13, 1, 1, "", "getInputDescription"], [13, 1, 1, "", "getInputDimension"], [13, 1, 1, "", "getOutputDescription"], [13, 1, 1, "", "getOutputDimension"], [13, 1, 1, "", "setInputDescription"], [13, 1, 1, "", "setOutputDescription"]], "otABCCalibration.MyClass": [[14, 1, 1, "", "__init__"], [14, 1, 1, "", "power"]]}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"]}, "objtypes": {"0": "py:class", "1": "py:method"}, "terms": {"": [2, 10, 11], "0": [1, 2, 3, 6, 8, 10, 11], "00": [3, 8], "000": [], "000211898": 2, "000363987": 2, "000438266": 2, "000608202": 2, "001": 2, "00126617": 2, "005": 2, "0077": 2, "0155": 2, "01e": 2, "0233": 2, "025": 2, "0311": 2, "0388": 2, "041": [], "042": [1, 3, 8], "0466": 2, "05": [2, 6], "0544": 2, "05456": 6, "06": [], "06035": 6, "0622": 2, "07": 2, "070": [], "0737456": 2, "0787326": 2, "08": 2, "09": [2, 3, 8], "090": [], "09803e": 2, "0e6": 2, "1": [2, 5, 9, 10, 11], "10": 2, "100": [2, 6], "1000": 2, "10030": 6, "10033": 6, "101": 1, "10200": 6, "10364": 6, "10365": 6, "11": 2, "1298": 2, "13": 11, "14": 2, "140": [], "14997": 2, "14998": 2, "14999": 2, "15": [2, 6], "15000": 2, "181": [], "1923e": 2, "19e": 2, "2": [1, 2, 3, 8, 9, 10, 11], "2451": 2, "250": [], "251": [2, 3, 8], "27": 2, "27061e": 2, "292": [], "293": [3, 8], "2975": 6, "2995": 6, "3": [1, 2, 11], "3000": 6, "3024": 6, "30474e": 2, "33": 6, "34902": 2, "3900": 6, "3901": 6, "4": [2, 11], "4000": 6, "4097": 6, "4100": 6, "42e": 2, "443": [], "45299": 2, "45749e": 2, "484": [], "48901e": 2, "49e": 2, "4e": 2, "5": [1, 2, 11], "500": 2, "5104e": 2, "51582e": 2, "52842e": 2, "54": 6, "56e": 2, "57779": 2, "57e": 2, "5e": 2, "6": [2, 6, 11], "60": 6, "61966e": 2, "629": [], "64843": 2, "65989e": 2, "66711e": 2, "67719e": 2, "698": [], "7": 2, "7000": 2, "72107e": 2, "74": 6, "79e": 2, "8": [2, 6, 11], "800": 2, "85587e": 2, "85e": 2, "87782e": 2, "9": [1, 2], "93627": 2, "95": 10, "95249e": 2, "96724e": 2, "96e": 2, "99": 6, "By": 9, "For": 9, "If": [9, 11], "In": 2, "The": [2, 5, 6, 9, 10, 11, 12, 14], "__class__": [10, 11], "__init__": [9, 10, 11, 12, 13, 14], "__main__": 9, "__name__": [9, 10, 11], "_exec": [2, 13], "a1": 6, "a2": 6, "abc": [9, 10], "abc_classproto": 2, "abccalibr": [0, 3, 7, 8, 13], "abccalibrationresult": [7, 9], "abccriteria": [9, 10], "abccriteriadimens": 13, "abcdescript": 9, "abov": 2, "accept": 14, "accessor": [9, 10, 11, 12, 13], "account": 11, "accur": 2, "acessor": 9, "add": [1, 2], "after": 10, "aim": [1, 2], "algo": 2, "algorithm": 9, "all": [0, 2, 8, 9, 10, 12], "alpha": 10, "also": 14, "altern": 2, "among": 9, "ampl": 9, "an": [9, 11], "analys": [2, 9], "anoth": 11, "api": 7, "appli": 14, "ar": [2, 4, 9, 11, 12, 14], "architectur": 5, "arg": 11, "argument": 9, "arrai": [1, 10, 14], "associ": [10, 12, 13], "auto_exampl": 3, "auto_examples_jupyt": 0, "auto_examples_python": 0, "avail": [9, 12], "base": 2, "been": 2, "befor": 10, "between": [2, 9], "bi": 12, "bool": [10, 11], "boolcollect": 11, "both": 11, "bound": 11, "build": [2, 4, 10, 12, 13], "buildabcexecfunct": 9, "buildadditionalmodeloutputfunct": 9, "buildresidualfunctionabc": 9, "buildresidualfunctionoptimalpoint": 9, "c": [2, 6], "c1": 6, "calibr": [0, 3, 8, 9, 10], "calibratedindic": 2, "calibrationresult": 9, "can": [2, 9], "candid": [2, 9], "candit": 9, "cannot": 2, "carlo": 9, "case": 5, "cd": 4, "cdistribut": 2, "center": 2, "chaboch": [0, 3, 8], "chaboche_model": 2, "chabochemodel": 2, "check": 11, "class": [0, 3, 4, 8, 9, 10, 11, 12, 13, 14], "class_nam": [10, 11], "cloud": 1, "cm": 2, "cmake": 4, "code": [0, 1, 2, 5], "column": 12, "combin": 11, "combinedinterv": 7, "compil": 5, "compon": 11, "compos": 9, "composeddistribut": 2, "comput": [1, 2, 9, 10, 11], "computeabccriteria": [2, 9, 13], "computeadditionalmodeloutput": 9, "computedist": 11, "computemean": 2, "computeoptimalpoint": 10, "computerawmo": 2, "condit": [2, 9, 10, 12], "conditionalsampl": [2, 7, 10], "confid": 10, "consid": [9, 12, 14], "consider": 5, "constructor": [9, 11, 12], "contain": [9, 11], "correl": [2, 10], "correspond": 11, "cpu": 9, "criteria": [9, 10, 12], "criteriaselect": [2, 9], "cube": 14, "current": 11, "cvrmse": 2, "cvrmse_": 2, "cvrmse_stress": 2, "d": [9, 10, 11], "d54380": 2, "data": 2, "datafram": 10, "dcmake_install_prefix": 4, "deduc": 10, "def": 2, "default": [9, 10, 11, 12], "defaut": [9, 12], "defin": 11, "densiti": 10, "depend": [5, 10], "deprec": 2, "deprecationwarn": 2, "descin": 13, "descipt": 10, "descout": 13, "descript": [6, 9, 10, 13], "design": [5, 9], "df": 10, "diagon": 12, "diagram": 4, "dim": 11, "dimens": [11, 12, 13], "dimension": 12, "discrep": 2, "discret": 11, "displai": 12, "distanc": 11, "distinguish": [10, 11], "distribut": [6, 9, 10, 12], "distributioninput": [2, 12], "distributionparamet": 2, "distributionpriorinput": 10, "distributionuobsparamet": [], "doc": [2, 4], "document": 2, "doe": [2, 9], "doeevals": 9, "doesampl": 9, "doesiz": [2, 9], "domain": 11, "dopenturns_dir": 4, "download": [0, 1, 2], "draw": [2, 10, 12], "drawobservationsvsinput": 10, "drawobservationsvspredict": [2, 10], "drawpairmarginalsresidu": 10, "drawparameterdistribut": 10, "drawposteriorinputdistribut": [2, 12], "drawposterioroutputdistribut": 12, "drawresidu": [2, 10], "drawresidualsnormalplot": 10, "due": 2, "e": [2, 6, 11], "e_p": 6, "each": [4, 9, 11], "effect": 9, "effici": 6, "element": 11, "empir": [2, 10], "empti": [10, 11], "enabl": [9, 13], "end": [1, 2], "energi": 6, "enforc": 9, "entri": 9, "ep": 6, "epsilon": [2, 11], "equal": [11, 12], "erro": 2, "error": 10, "estim": [6, 10, 12], "euclidean": 11, "evalu": [2, 9, 10, 13], "exampl": [2, 3, 6, 8, 9, 11], "execut": [3, 8], "exp": 2, "experi": 9, "expos": 5, "expriment": 9, "extra": 12, "f": 6, "fals": [2, 11], "favour": 2, "fig": 2, "figur": 2, "file": [3, 8], "filter": 12, "finit": 11, "finitelowerbound": 11, "finiteupperbound": 11, "flag": [10, 11], "float": [9, 10, 11, 14], "follow": 2, "frac": [2, 6], "from": [1, 2, 3, 8, 10, 12, 13], "full": [1, 2], "func": [7, 9], "function": [1, 2, 9, 10, 13, 14], "futur": 2, "g": 2, "galleri": 8, "gamma": 2, "gammadistribut": 2, "gaussian": [2, 10], "gener": [2, 9], "generatedo": 9, "get": [10, 11], "getabcresidualssampl": 10, "getclassnam": [10, 11], "getconditionalsampl": 10, "getdimens": 11, "getevaluatedsampl": 9, "getfinitelowerbound": 11, "getfiniteupperbound": 11, "getid": [10, 11], "getinputdescript": 13, "getinputdimens": 13, "getinputobserv": 10, "getlowerbound": 11, "getmargin": 11, "getmean": 2, "getnam": [10, 11], "getobservationserror": 10, "getoutputatposteriormean": 10, "getoutputatpriormean": 10, "getoutputdescript": 13, "getoutputdimens": 13, "getoutputobserv": 10, "getparametermap": [2, 10], "getparameterposterior": 10, "getparameterprior": 10, "getposteriorglobalsampl": 12, "getposteriorinputdistribut": 12, "getposteriorinputsampl": 12, "getposterioroutputsampl": 12, "getpriordo": [2, 9], "getresidualfunct": 10, "getresult": [2, 9], "getshadowedid": [10, 11], "getsiz": 2, "getthetamapasdatafram": 10, "getupperbound": 11, "getvis": [10, 11], "getvolum": 11, "given": [2, 10, 11], "global": [4, 9], "globalsampl": [9, 10], "go": [1, 2], "goal": 5, "govern": 5, "graph": [1, 10], "grid": [2, 10, 12], "gridlayout": [10, 12], "guidelin": 9, "ha": [2, 10, 11, 12], "hasnam": [10, 11], "hasvisiblenam": [10, 11], "have": 9, "here": [2, 4], "home": 2, "how": 1, "i": [2, 4, 5, 6, 9, 10, 11], "id": [10, 11, 12], "idenfi": 2, "identifi": [10, 11, 12], "idiom": 9, "illustr": [1, 2], "imp": 2, "import": [1, 2, 11], "importfromcsvfil": 2, "importlib": 2, "includ": 12, "independ": 6, "index": [7, 11, 12], "indic": [9, 10, 11], "inf": 11, "infer": [2, 10, 12], "inferior": 11, "infinit": 11, "input": [2, 9, 10, 12, 13], "inputcolumnsid": [10, 12], "inputdimens": 13, "inputobserv": [9, 10, 13], "inputobservationsprioruncertainti": [], "inputparameterspriordistribut": [], "inputpriordistribut": 9, "inputsampl": [10, 12], "insid": 11, "instal": 4, "int": [9, 10, 11, 12], "integ": 9, "intend": 13, "interior": 11, "intern": [10, 11], "intersect": 11, "interv": [2, 9, 10, 11, 12], "interval1": 11, "interval2": 11, "intervalcriteria": 12, "investig": 2, "ipynb": [1, 2], "isempti": 11, "isinsid": 11, "isnumericallyempti": 11, "iso": 12, "its": [11, 12], "join": 11, "joint": 2, "jupyt": [0, 1, 2], "kernel": 10, "kernelsmooth": 12, "l": 6, "larg": 9, "layer": 4, "level": 10, "lib": 4, "like": 14, "linspac": 1, "list": 12, "load": [1, 2], "log": 2, "logiciel": 2, "loss": 6, "lower": 11, "lowerbound": 11, "m": 6, "margin": [9, 10, 11, 12], "math": 2, "matplotlib": 2, "max": 6, "maxcvrms": 2, "maximis": [2, 10], "maximum": 10, "maxnmb": 2, "mb": [3, 8], "mbe_": 2, "mbe_stress": 2, "mean": 10, "measur": 2, "mem": [3, 8], "met": 9, "method": [2, 9, 10, 11, 12, 13, 14], "min": 6, "mincvrms": 2, "minim": 9, "minnmb": 2, "minut": [1, 2], "mkdir": 4, "model": [0, 3, 8, 9, 10, 13], "modul": [0, 2, 3, 4, 8], "mont": 9, "montecarlo": [2, 9], "mostli": 2, "multiprocess": 9, "must": 9, "mycf": 2, "myclass": [1, 7], "n": 14, "n_cpu": [2, 9, 13], "name": [6, 10, 11], "need": [2, 4, 9], "nelec": 6, "new": 2, "nmbe": 2, "nmbe_": 2, "nmbe_stress": 2, "none": [2, 9, 12, 13], "normal": [2, 6, 10], "note": [9, 13, 14], "notebook": [0, 1, 2], "noth": 9, "np": 1, "nth": 6, "number": 9, "numberofobserv": [2, 13], "numer": 11, "numericallycontain": 11, "numpi": 1, "object": [1, 9, 10, 11, 14], "observ": [9, 10], "observationserror": 10, "observedoutputindic": [2, 9], "observedparamet": 2, "observedparameterindic": [2, 9, 13], "observedvari": 2, "observedvariablesampl": 2, "obsev": 9, "obtain": 2, "one": [10, 11, 12], "onli": 9, "openturn": [1, 2, 4, 11, 14], "opentursn": 11, "optim": [2, 10], "optimalpoint": 10, "option": [4, 9], "optionn": 12, "order": [4, 9], "ot": [1, 2, 11, 12], "otabcc": 2, "otabccalibr": [1, 2, 4], "otabccalibrationpython": [0, 3, 8], "other": [2, 11], "otherinterv": 11, "otherwis": 11, "otv": 2, "output": [2, 9, 10, 12, 13], "outputatposterior": 10, "outputatposteriormean": 10, "outputatprior": 10, "outputatpriormean": 10, "outputcolumn": 12, "outputcolumnsid": [10, 12], "outputobserv": [9, 10, 13], "outputsaml": 12, "p": 4, "pa": 2, "page": 7, "panda": 10, "paral": 13, "paramet": [2, 9, 10, 11, 12, 13, 14], "parametermap": 10, "parameterposterior": 10, "parameterprior": 10, "parametertocalibr": 2, "parametricfunct": 2, "paramtertocalibr": 2, "part": 5, "pdf": 12, "pi": 2, "pictur": 2, "platform": 5, "plot": [10, 12], "plot_bas": [1, 3, 8], "plot_calibration_chaboche_model": [2, 3, 8], "plt": 2, "point": [2, 9, 10, 11, 14], "pointcriteria": 2, "popul": 9, "posterior": [2, 9, 10, 12], "posteriorglobalsampl": 12, "posteriori": 10, "posteriorsampletargeteds": [2, 9], "postprocess": 10, "power": [1, 14], "practic": 2, "predict": [2, 10], "predictionsampl": 9, "present": 2, "primari": 6, "principl": 5, "print": [1, 2, 11], "prior": [9, 10, 12], "priorcriteria": 2, "priorpredict": 2, "probabilist": 10, "program": 9, "protect": 9, "provid": [2, 9, 10, 12], "purpos": 6, "pwd": 4, "py": [1, 2, 3, 8], "pyplot": 2, "python": [0, 1, 2, 9], "q": 6, "quantil": 10, "r": 2, "random": 2, "rate": 6, "rdistribut": 2, "read": 9, "recal": 2, "refer": [6, 7], "reload": 2, "request": 9, "residu": [2, 10], "residualfunct": 10, "residualsabcsampl": 10, "resourcemap": 11, "result": [2, 9, 10], "retain": 10, "return": [2, 9, 10, 11, 12, 14], "risk": 6, "rmse": 2, "rmse_": 2, "rmse_stress": 2, "run": [1, 2, 9], "same": [9, 11, 13], "sampl": [2, 9, 10, 11, 12, 14], "samplepredict": 2, "sampleselectioncriteria": 10, "save": 6, "script": [1, 2], "search": 7, "second": [1, 2], "see": 2, "seed": 9, "seen": 2, "select": [9, 10, 11, 12], "sequenc": [9, 10, 11, 12], "sequenti": 9, "set": [9, 11], "setabccriteriadescript": [2, 9], "setabcresidualsdescript": 10, "setdescript": 2, "setdo": 9, "setfinitelowerbound": 11, "setfiniteupperbound": 11, "setinputdescript": 13, "setinputobserv": 10, "setlowerbound": 11, "setnam": [10, 11], "setobservationserror": 10, "setoutputatpriorandposteriormean": 10, "setoutputdescript": 13, "setoutputobserv": 10, "setparametermap": 10, "setparameterposterior": 10, "setparameterprior": 10, "setresidualfunct": 10, "setshadowedid": [10, 11], "setupperbound": 11, "setvis": [10, 11], "sever": [4, 11], "shadow": [10, 11], "should": 9, "show": [1, 2], "sigma": 2, "size": [2, 9], "smallest": 11, "smallvolum": 11, "smooth": 10, "so": 13, "some": 2, "sourc": [0, 1, 2, 5], "spearman": 10, "sphinx": 4, "sqrt": 2, "squar": 1, "stack": 9, "state": [10, 11], "step": 6, "stochast": 6, "storag": 10, "store": 9, "str": [10, 11], "strain": 2, "strainudistribut": 2, "stress": 2, "structur": 5, "sugget": 2, "t": 6, "take": [2, 9, 11], "targeget": 2, "target": 9, "targetposteriorsampl": 9, "tell": 11, "test": [2, 5, 10, 11, 13, 14], "th": 11, "than": 9, "theta": [2, 10], "theta_": 2, "thetaprior": 2, "thi": [1, 2, 4, 5, 6, 9], "thu": 9, "time": [1, 2], "tocalibrateparameterindic": [2, 9, 10, 13], "total": [1, 2, 3, 8], "true": [1, 2, 10, 11], "two": 2, "type": 14, "typic": 2, "u": 6, "u_": 2, "uncertainti": [2, 9], "uniform": 2, "uniqu": [10, 11], "until": 9, "upper": 11, "upperbound": 11, "us": [0, 3, 8, 9, 10, 12, 13], "usecas": 2, "useful": 9, "v": 10, "valid": 5, "valu": [1, 6, 10, 11, 12, 14], "varepsilon": 2, "variabl": [6, 9], "vector": 9, "view": [1, 2], "viewer": [1, 2], "visibl": [10, 11], "volum": 11, "we": 2, "where": 2, "whether": 11, "which": [2, 9], "while": 2, "window": 9, "within": 11, "x": 9, "x1": 1, "x2": 1, "xxxxxx": 5, "y": 14, "you": 9, "your": 9, "zip": 0}, "titles": ["Examples", "Example : Using otABCCalibrationpython module", "Calibrate Chaboche model using ABCCalibration Class", "Computation times", "Architecture considerations", "Developer guide", "Validation", "otABCCalibration documentation", "Computation times", "ABCCalibration", "ABCCalibrationResult", "CombinedInterval", "ConditionalSample", "Func", "MyClass", "API Reference"], "titleterms": {"1": 6, "2": 6, "abc": 2, "abccalibr": [2, 9], "abccalibrationresult": 10, "analysi": 6, "api": 15, "architectur": 4, "b": 6, "calibr": 2, "case": 6, "chaboch": 2, "class": 2, "code": 4, "combinedinterv": 11, "compil": 4, "comput": [3, 8], "conditionalsampl": 12, "consider": 4, "criteria": 2, "defin": 2, "depend": 4, "determinist": 6, "develop": [5, 7], "distribut": 2, "document": 7, "exampl": [0, 1, 7], "func": 13, "guid": [5, 7], "indic": 7, "input": 6, "model": 2, "modul": 1, "myclass": 14, "observ": 2, "otabccalibr": 7, "otabccalibrationpython": 1, "output": 6, "parametr": 6, "prior": 2, "problem": 6, "refer": 15, "result": 6, "set": 2, "sourc": 4, "statement": 6, "structur": 4, "tabl": 7, "test": 6, "time": [3, 8], "us": [1, 2], "user": 7, "valid": 6, "xxxxxx": 6}})